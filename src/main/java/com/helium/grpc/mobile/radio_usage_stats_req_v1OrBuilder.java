// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: service/poc_mobile.proto
// Protobuf Java Version: 4.29.2

package com.helium.grpc.mobile;

public interface radio_usage_stats_req_v1OrBuilder extends
    // @@protoc_insertion_point(interface_extends:helium.poc_mobile.radio_usage_stats_req_v1)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The onchain address of the hotspot
   * </pre>
   *
   * <code>bytes hotspot_pubkey = 1;</code>
   * @return The hotspotPubkey.
   */
  com.google.protobuf.ByteString getHotspotPubkey();

  /**
   * <pre>
   * the cbsd id of the radio if it is a cbrs radio otherwise empty
   * </pre>
   *
   * <code>string cbsd_id = 2;</code>
   * @return The cbsdId.
   */
  java.lang.String getCbsdId();
  /**
   * <pre>
   * the cbsd id of the radio if it is a cbrs radio otherwise empty
   * </pre>
   *
   * <code>string cbsd_id = 2;</code>
   * @return The bytes for cbsdId.
   */
  com.google.protobuf.ByteString
      getCbsdIdBytes();

  /**
   * <pre>
   * Number of unique service provider subscribers which have connected
   * to the radio during the epoch ( inclusive of discovery mapping
   * enabled subscribers )
   * </pre>
   *
   * <code>uint64 service_provider_user_count = 3;</code>
   * @return The serviceProviderUserCount.
   */
  long getServiceProviderUserCount();

  /**
   * <pre>
   * Number of unique discovery mapping subscribers which
   * have connected to the radio during the epoch
   * </pre>
   *
   * <code>uint64 disco_mapping_user_count = 4;</code>
   * @return The discoMappingUserCount.
   */
  long getDiscoMappingUserCount();

  /**
   * <pre>
   * Number of unique offload users which have connected to the radio
   * during the epoch
   * </pre>
   *
   * <code>uint64 offload_user_count = 5;</code>
   * @return The offloadUserCount.
   */
  long getOffloadUserCount();

  /**
   * <pre>
   * total count of bytes transferred via the radio by service provider
   * subscribers during the epoch, inclusive of upload and download
   * </pre>
   *
   * <code>uint64 service_provider_transfer_bytes = 6;</code>
   * @return The serviceProviderTransferBytes.
   */
  long getServiceProviderTransferBytes();

  /**
   * <pre>
   * total count of bytes transferred via the radio by offload users
   * during the epoch
   * inclusive of upload and download
   * </pre>
   *
   * <code>uint64 offload_transfer_bytes = 7;</code>
   * @return The offloadTransferBytes.
   */
  long getOffloadTransferBytes();

  /**
   * <pre>
   * Unix timestamp in milliseconds of the epoch start
   * </pre>
   *
   * <code>uint64 epoch_start_timestamp = 8;</code>
   * @return The epochStartTimestamp.
   */
  long getEpochStartTimestamp();

  /**
   * <pre>
   * Unix timestamp in milliseconds of the epoch end
   * </pre>
   *
   * <code>uint64 epoch_end_timestamp = 9;</code>
   * @return The epochEndTimestamp.
   */
  long getEpochEndTimestamp();

  /**
   * <pre>
   * Unix timestamp in milliseconds of when the report was generated
   * </pre>
   *
   * <code>uint64 timestamp = 10;</code>
   * @return The timestamp.
   */
  long getTimestamp();

  /**
   * <pre>
   * Carrier pubkey from verification mapping service
   * </pre>
   *
   * <code>bytes carrier_mapping_key = 11;</code>
   * @return The carrierMappingKey.
   */
  com.google.protobuf.ByteString getCarrierMappingKey();

  /**
   * <pre>
   * Signed payload of the verification mapping service
   * </pre>
   *
   * <code>bytes signature = 12;</code>
   * @return The signature.
   */
  com.google.protobuf.ByteString getSignature();
}
