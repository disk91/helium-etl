// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: service/poc_mobile.proto
// Protobuf Java Version: 4.29.2

package com.helium.grpc.mobile;

public interface speedtest_avgOrBuilder extends
    // @@protoc_insertion_point(interface_extends:helium.poc_mobile.speedtest_avg)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>bytes pub_key = 1;</code>
   * @return The pubKey.
   */
  com.google.protobuf.ByteString getPubKey();

  /**
   * <pre>
   * &#47; bytes/sec
   * </pre>
   *
   * <code>uint64 upload_speed_avg_bps = 2;</code>
   * @return The uploadSpeedAvgBps.
   */
  long getUploadSpeedAvgBps();

  /**
   * <pre>
   * &#47; bytes/sec
   * </pre>
   *
   * <code>uint64 download_speed_avg_bps = 3;</code>
   * @return The downloadSpeedAvgBps.
   */
  long getDownloadSpeedAvgBps();

  /**
   * <code>uint32 latency_avg_ms = 4;</code>
   * @return The latencyAvgMs.
   */
  int getLatencyAvgMs();

  /**
   * <code>.helium.poc_mobile.speedtest_avg_validity validity = 5;</code>
   * @return The enum numeric value on the wire for validity.
   */
  int getValidityValue();
  /**
   * <code>.helium.poc_mobile.speedtest_avg_validity validity = 5;</code>
   * @return The validity.
   */
  com.helium.grpc.mobile.speedtest_avg_validity getValidity();

  /**
   * <code>repeated .helium.poc_mobile.speedtest speedtests = 6;</code>
   */
  java.util.List<com.helium.grpc.mobile.speedtest> 
      getSpeedtestsList();
  /**
   * <code>repeated .helium.poc_mobile.speedtest speedtests = 6;</code>
   */
  com.helium.grpc.mobile.speedtest getSpeedtests(int index);
  /**
   * <code>repeated .helium.poc_mobile.speedtest speedtests = 6;</code>
   */
  int getSpeedtestsCount();
  /**
   * <code>repeated .helium.poc_mobile.speedtest speedtests = 6;</code>
   */
  java.util.List<? extends com.helium.grpc.mobile.speedtestOrBuilder> 
      getSpeedtestsOrBuilderList();
  /**
   * <code>repeated .helium.poc_mobile.speedtest speedtests = 6;</code>
   */
  com.helium.grpc.mobile.speedtestOrBuilder getSpeedtestsOrBuilder(
      int index);

  /**
   * <pre>
   * &#47; Unix timestamp (seconds since 1970) of when the average was calculated
   * </pre>
   *
   * <code>uint64 timestamp = 7;</code>
   * @return The timestamp.
   */
  long getTimestamp();

  /**
   * <code>float reward_multiplier = 8;</code>
   * @return The rewardMultiplier.
   */
  float getRewardMultiplier();
}
