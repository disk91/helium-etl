// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: service/poc_mobile.proto
// Protobuf Java Version: 4.29.2

package com.helium.grpc.mobile;

public interface heartbeatOrBuilder extends
    // @@protoc_insertion_point(interface_extends:helium.poc_mobile.heartbeat)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * applicable to cell heartbeats only
   * </pre>
   *
   * <code>string cbsd_id = 1;</code>
   * @return The cbsdId.
   */
  java.lang.String getCbsdId();
  /**
   * <pre>
   * applicable to cell heartbeats only
   * </pre>
   *
   * <code>string cbsd_id = 1;</code>
   * @return The bytes for cbsdId.
   */
  com.google.protobuf.ByteString
      getCbsdIdBytes();

  /**
   * <code>bytes pub_key = 2;</code>
   * @return The pubKey.
   */
  com.google.protobuf.ByteString getPubKey();

  /**
   * <pre>
   * this value is the heartbeat_multiplier * location_trust_score_multiplier
   * </pre>
   *
   * <code>float reward_multiplier = 3 [deprecated = true];</code>
   * @deprecated helium.poc_mobile.heartbeat.reward_multiplier is deprecated.
   *     See service/poc_mobile.proto;l=463
   * @return The rewardMultiplier.
   */
  @java.lang.Deprecated float getRewardMultiplier();

  /**
   * <code>uint64 timestamp = 4;</code>
   * @return The timestamp.
   */
  long getTimestamp();

  /**
   * <code>.helium.poc_mobile.cell_type cell_type = 5;</code>
   * @return The enum numeric value on the wire for cellType.
   */
  int getCellTypeValue();
  /**
   * <code>.helium.poc_mobile.cell_type cell_type = 5;</code>
   * @return The cellType.
   */
  com.helium.grpc.mobile.cell_type getCellType();

  /**
   * <code>.helium.poc_mobile.heartbeat_validity validity = 6;</code>
   * @return The enum numeric value on the wire for validity.
   */
  int getValidityValue();
  /**
   * <code>.helium.poc_mobile.heartbeat_validity validity = 6;</code>
   * @return The validity.
   */
  com.helium.grpc.mobile.heartbeat_validity getValidity();

  /**
   * <code>double lat = 7;</code>
   * @return The lat.
   */
  double getLat();

  /**
   * <code>double lon = 8;</code>
   * @return The lon.
   */
  double getLon();

  /**
   * <pre>
   * UUID of the coverage object associated with this heartbeat
   * </pre>
   *
   * <code>bytes coverage_object = 9;</code>
   * @return The coverageObject.
   */
  com.google.protobuf.ByteString getCoverageObject();

  /**
   * <pre>
   * Timestamp of location validation in seconds from unix epoch
   * applicable to wifi heartbeats only
   * </pre>
   *
   * <code>uint64 location_validation_timestamp = 10;</code>
   * @return The locationValidationTimestamp.
   */
  long getLocationValidationTimestamp();

  /**
   * <pre>
   * Distance in meters to the asserted location of the gateway_reward
   * at the time of heartbeat verification
   * </pre>
   *
   * <code>uint64 distance_to_asserted = 11;</code>
   * @return The distanceToAsserted.
   */
  long getDistanceToAsserted();

  /**
   * <pre>
   * only used for wifi radios, all others should have a value of 1.0
   * value is 0.0 to 1.0 multiplied by 1000
   * </pre>
   *
   * <code>uint32 location_trust_score_multiplier = 12;</code>
   * @return The locationTrustScoreMultiplier.
   */
  int getLocationTrustScoreMultiplier();

  /**
   * <code>.helium.poc_mobile.location_source location_source = 13;</code>
   * @return The enum numeric value on the wire for locationSource.
   */
  int getLocationSourceValue();
  /**
   * <code>.helium.poc_mobile.location_source location_source = 13;</code>
   * @return The locationSource.
   */
  com.helium.grpc.mobile.location_source getLocationSource();
}
