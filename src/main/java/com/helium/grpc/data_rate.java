// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_rate.proto

package com.helium.grpc;

/**
 * Protobuf enum {@code helium.data_rate}
 */
public enum data_rate
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SF12BW125 = 0;</code>
   */
  SF12BW125(0),
  /**
   * <code>SF11BW125 = 1;</code>
   */
  SF11BW125(1),
  /**
   * <code>SF10BW125 = 2;</code>
   */
  SF10BW125(2),
  /**
   * <code>SF9BW125 = 3;</code>
   */
  SF9BW125(3),
  /**
   * <code>SF8BW125 = 4;</code>
   */
  SF8BW125(4),
  /**
   * <code>SF7BW125 = 5;</code>
   */
  SF7BW125(5),
  /**
   * <code>SF12BW250 = 6;</code>
   */
  SF12BW250(6),
  /**
   * <code>SF11BW250 = 7;</code>
   */
  SF11BW250(7),
  /**
   * <code>SF10BW250 = 8;</code>
   */
  SF10BW250(8),
  /**
   * <code>SF9BW250 = 9;</code>
   */
  SF9BW250(9),
  /**
   * <code>SF8BW250 = 10;</code>
   */
  SF8BW250(10),
  /**
   * <code>SF7BW250 = 11;</code>
   */
  SF7BW250(11),
  /**
   * <code>SF12BW500 = 12;</code>
   */
  SF12BW500(12),
  /**
   * <code>SF11BW500 = 13;</code>
   */
  SF11BW500(13),
  /**
   * <code>SF10BW500 = 14;</code>
   */
  SF10BW500(14),
  /**
   * <code>SF9BW500 = 15;</code>
   */
  SF9BW500(15),
  /**
   * <code>SF8BW500 = 16;</code>
   */
  SF8BW500(16),
  /**
   * <code>SF7BW500 = 17;</code>
   */
  SF7BW500(17),
  /**
   * <code>LRFHSS1BW137 = 18;</code>
   */
  LRFHSS1BW137(18),
  /**
   * <code>LRFHSS2BW137 = 19;</code>
   */
  LRFHSS2BW137(19),
  /**
   * <code>LRFHSS1BW336 = 20;</code>
   */
  LRFHSS1BW336(20),
  /**
   * <code>LRFHSS2BW336 = 21;</code>
   */
  LRFHSS2BW336(21),
  /**
   * <code>LRFHSS1BW1523 = 22;</code>
   */
  LRFHSS1BW1523(22),
  /**
   * <code>LRFHSS2BW1523 = 23;</code>
   */
  LRFHSS2BW1523(23),
  /**
   * <code>FSK50 = 24;</code>
   */
  FSK50(24),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SF12BW125 = 0;</code>
   */
  public static final int SF12BW125_VALUE = 0;
  /**
   * <code>SF11BW125 = 1;</code>
   */
  public static final int SF11BW125_VALUE = 1;
  /**
   * <code>SF10BW125 = 2;</code>
   */
  public static final int SF10BW125_VALUE = 2;
  /**
   * <code>SF9BW125 = 3;</code>
   */
  public static final int SF9BW125_VALUE = 3;
  /**
   * <code>SF8BW125 = 4;</code>
   */
  public static final int SF8BW125_VALUE = 4;
  /**
   * <code>SF7BW125 = 5;</code>
   */
  public static final int SF7BW125_VALUE = 5;
  /**
   * <code>SF12BW250 = 6;</code>
   */
  public static final int SF12BW250_VALUE = 6;
  /**
   * <code>SF11BW250 = 7;</code>
   */
  public static final int SF11BW250_VALUE = 7;
  /**
   * <code>SF10BW250 = 8;</code>
   */
  public static final int SF10BW250_VALUE = 8;
  /**
   * <code>SF9BW250 = 9;</code>
   */
  public static final int SF9BW250_VALUE = 9;
  /**
   * <code>SF8BW250 = 10;</code>
   */
  public static final int SF8BW250_VALUE = 10;
  /**
   * <code>SF7BW250 = 11;</code>
   */
  public static final int SF7BW250_VALUE = 11;
  /**
   * <code>SF12BW500 = 12;</code>
   */
  public static final int SF12BW500_VALUE = 12;
  /**
   * <code>SF11BW500 = 13;</code>
   */
  public static final int SF11BW500_VALUE = 13;
  /**
   * <code>SF10BW500 = 14;</code>
   */
  public static final int SF10BW500_VALUE = 14;
  /**
   * <code>SF9BW500 = 15;</code>
   */
  public static final int SF9BW500_VALUE = 15;
  /**
   * <code>SF8BW500 = 16;</code>
   */
  public static final int SF8BW500_VALUE = 16;
  /**
   * <code>SF7BW500 = 17;</code>
   */
  public static final int SF7BW500_VALUE = 17;
  /**
   * <code>LRFHSS1BW137 = 18;</code>
   */
  public static final int LRFHSS1BW137_VALUE = 18;
  /**
   * <code>LRFHSS2BW137 = 19;</code>
   */
  public static final int LRFHSS2BW137_VALUE = 19;
  /**
   * <code>LRFHSS1BW336 = 20;</code>
   */
  public static final int LRFHSS1BW336_VALUE = 20;
  /**
   * <code>LRFHSS2BW336 = 21;</code>
   */
  public static final int LRFHSS2BW336_VALUE = 21;
  /**
   * <code>LRFHSS1BW1523 = 22;</code>
   */
  public static final int LRFHSS1BW1523_VALUE = 22;
  /**
   * <code>LRFHSS2BW1523 = 23;</code>
   */
  public static final int LRFHSS2BW1523_VALUE = 23;
  /**
   * <code>FSK50 = 24;</code>
   */
  public static final int FSK50_VALUE = 24;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static data_rate valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static data_rate forNumber(int value) {
    switch (value) {
      case 0: return SF12BW125;
      case 1: return SF11BW125;
      case 2: return SF10BW125;
      case 3: return SF9BW125;
      case 4: return SF8BW125;
      case 5: return SF7BW125;
      case 6: return SF12BW250;
      case 7: return SF11BW250;
      case 8: return SF10BW250;
      case 9: return SF9BW250;
      case 10: return SF8BW250;
      case 11: return SF7BW250;
      case 12: return SF12BW500;
      case 13: return SF11BW500;
      case 14: return SF10BW500;
      case 15: return SF9BW500;
      case 16: return SF8BW500;
      case 17: return SF7BW500;
      case 18: return LRFHSS1BW137;
      case 19: return LRFHSS2BW137;
      case 20: return LRFHSS1BW336;
      case 21: return LRFHSS2BW336;
      case 22: return LRFHSS1BW1523;
      case 23: return LRFHSS2BW1523;
      case 24: return FSK50;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<data_rate>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      data_rate> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<data_rate>() {
          public data_rate findValueByNumber(int number) {
            return data_rate.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return PocLoRa.getDescriptor().getEnumTypes().get(0);
  }

  private static final data_rate[] VALUES = values();

  public static data_rate valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private data_rate(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:helium.data_rate)
}

